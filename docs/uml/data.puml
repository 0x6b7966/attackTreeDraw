@startuml
skinparam monochrome true
skinparam classAttributeIconSize 0
scale 2

namespace data {
  namespace exceptions {
    Exception <|-- ParserError
    class ParserError {
    }

    Exception <|-- XMLXSDError
    class XMLXSDError {
    }

  }
  namespace handler {
    class TreeHandler {
      +buildFromXML(file){static}
      +saveToXML(tree, file){static}
    }

    class Parsers {
      +parseExtendedConnection(tree, edge){static}
      +parseNode(node){static}
      +parseExtendedNode(tree, node){static}
      +parseSimpleConjunction(tree, node, parent=None){static}
      +parseSimpleNode(tree, node, parent=None){static}
    }

  }
  namespace types {
    class Node {
      +type
      +isRoot
      +id
      +title
      +description
      +attributes
      +parents
      +children
      +view
      +position
      +visited
      +finished
      -__init__(self)
      +initDFS(self)
    }

    Node <|-- Threat
    class Threat {
    }

    Node <|-- Countermeasure
    class Countermeasure {
    }

    Node <|-- Conjunction
    class Conjunction {
      +id
      +conjunctionType
      +title
      -__init__(self, id=None, conjunctionType=None)
    }

    class Edge {
      +source
      +destination
      -__init__(self, source, destination)
      -__hash__(self)
    }

    class Tree {
      +extended
      +nodeList
      +edgeList
      +falseNodes
      +cycleNode
      +root
      +meta
      +lastError
      -__init__(self, extended)
      +getTypeRecursiveDown(self, node)
      +getTypeRecursiveUp(self, node)
      +getFirstElementRecursiveDown(self, node)
      +getFirstElementRecursiveUp(self, node)
      +addNode(self, node)
      +addEdge(self, sourceId, destinationId)
      +checkMeta(self)
      +checkNodes(self)
      +checkExtended(self)
      +checkCycle(self)
      +dfs(self, node)
      +getNextID(self, keyList=None)
      +removeNode(self, nodeId)
      +removeEdge(self, edgeId)
    }

  }
}

@enduml
